package org.h2.fulltext;

import java.io.IOException;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.UUID;
import org.h2.api.Trigger;
import org.h2.command.Parser;
import org.h2.engine.SessionLocal;
import org.h2.expression.Expression;
import org.h2.expression.ExpressionColumn;
import org.h2.expression.ValueExpression;
import org.h2.expression.condition.Comparison;
import org.h2.expression.condition.ConditionAndOr;
import org.h2.jdbc.JdbcConnection;
import org.h2.message.DbException;
import org.h2.tools.SimpleResultSet;
import org.h2.util.IOUtils;
import org.h2.util.StringUtils;
import org.h2.util.Utils;

public class FullText {
   private static final String FIELD_SCHEMA = "SCHEMA";
   private static final String FIELD_TABLE = "TABLE";
   private static final String FIELD_COLUMNS = "COLUMNS";
   private static final String FIELD_KEYS = "KEYS";
   private static final String FIELD_SCORE = "SCORE";
   private static final String TRIGGER_PREFIX = "FT_";
   private static final String SCHEMA = "FT";
   private static final String SELECT_MAP_BY_WORD_ID = "SELECT ROWID FROM FT.MAP WHERE WORDID=?";
   private static final String SELECT_ROW_BY_ID = "SELECT `KEY`, INDEXID FROM FT.ROWS WHERE ID=?";
   private static final String FIELD_QUERY = "QUERY";

   public static void init(Connection var0) throws SQLException {
      Statement var1 = var0.createStatement();
      var1.execute("CREATE SCHEMA IF NOT EXISTS FT");
      var1.execute("CREATE TABLE IF NOT EXISTS FT.INDEXES(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SCHEMA VARCHAR, `TABLE` VARCHAR, COLUMNS VARCHAR, UNIQUE(SCHEMA, `TABLE`))");
      var1.execute("CREATE TABLE IF NOT EXISTS FT.WORDS(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NAME VARCHAR, UNIQUE(NAME))");
      var1.execute("CREATE TABLE IF NOT EXISTS FT.ROWS(ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, HASH INT, INDEXID INT, `KEY` VARCHAR, UNIQUE(HASH, INDEXID, `KEY`))");
      var1.execute("CREATE TABLE IF NOT EXISTS FT.MAP(ROWID INT, WORDID INT, PRIMARY KEY(WORDID, ROWID))");
      var1.execute("CREATE TABLE IF NOT EXISTS FT.IGNORELIST(LIST VARCHAR)");
      var1.execute("CREATE TABLE IF NOT EXISTS FT.SETTINGS(`KEY` VARCHAR PRIMARY KEY, `VALUE` VARCHAR)");
      String var2 = FullText.class.getName();
      var1.execute("CREATE ALIAS IF NOT EXISTS FT_CREATE_INDEX FOR '" + var2 + ".createIndex'");
      var1.execute("CREATE ALIAS IF NOT EXISTS FT_DROP_INDEX FOR '" + var2 + ".dropIndex'");
      var1.execute("CREATE ALIAS IF NOT EXISTS FT_SEARCH FOR '" + var2 + ".search'");
      var1.execute("CREATE ALIAS IF NOT EXISTS FT_SEARCH_DATA FOR '" + var2 + ".searchData'");
      var1.execute("CREATE ALIAS IF NOT EXISTS FT_REINDEX FOR '" + var2 + ".reindex'");
      var1.execute("CREATE ALIAS IF NOT EXISTS FT_DROP_ALL FOR '" + var2 + ".dropAll'");
      FullTextSettings var3 = FullTextSettings.getInstance(var0);
      ResultSet var4 = var1.executeQuery("SELECT * FROM FT.IGNORELIST");

      String var5;
      while(var4.next()) {
         var5 = var4.getString(1);
         setIgnoreList(var3, var5);
      }

      var4 = var1.executeQuery("SELECT * FROM FT.SETTINGS");

      while(var4.next()) {
         var5 = var4.getString(1);
         if ("whitespaceChars".equals(var5)) {
            String var6 = var4.getString(2);
            var3.setWhitespaceChars(var6);
         }
      }

      var4 = var1.executeQuery("SELECT * FROM FT.WORDS");

      while(var4.next()) {
         var5 = var4.getString("NAME");
         int var7 = var4.getInt("ID");
         var5 = var3.convertWord(var5);
         if (var5 != null) {
            var3.addWord(var5, var7);
         }
      }

      var3.setInitialized(true);
   }

   public static void createIndex(Connection var0, String var1, String var2, String var3) throws SQLException {
      init(var0);
      PreparedStatement var4 = var0.prepareStatement("INSERT INTO FT.INDEXES(SCHEMA, `TABLE`, COLUMNS) VALUES(?, ?, ?)");
      var4.setString(1, var1);
      var4.setString(2, var2);
      var4.setString(3, var3);
      var4.execute();
      createTrigger(var0, var1, var2);
      indexExistingRows(var0, var1, var2);
   }

   public static void reindex(Connection var0) throws SQLException {
      init(var0);
      removeAllTriggers(var0, "FT_");
      FullTextSettings var1 = FullTextSettings.getInstance(var0);
      var1.clearWordList();
      Statement var2 = var0.createStatement();
      var2.execute("TRUNCATE TABLE FT.WORDS");
      var2.execute("TRUNCATE TABLE FT.ROWS");
      var2.execute("TRUNCATE TABLE FT.MAP");
      ResultSet var3 = var2.executeQuery("SELECT * FROM FT.INDEXES");

      while(var3.next()) {
         String var4 = var3.getString("SCHEMA");
         String var5 = var3.getString("TABLE");
         createTrigger(var0, var4, var5);
         indexExistingRows(var0, var4, var5);
      }

   }

   public static void dropIndex(Connection var0, String var1, String var2) throws SQLException {
      init(var0);
      PreparedStatement var3 = var0.prepareStatement("SELECT ID FROM FT.INDEXES WHERE SCHEMA=? AND `TABLE`=?");
      var3.setString(1, var1);
      var3.setString(2, var2);
      ResultSet var4 = var3.executeQuery();
      if (var4.next()) {
         int var5 = var4.getInt(1);
         var3 = var0.prepareStatement("DELETE FROM FT.INDEXES WHERE ID=?");
         var3.setInt(1, var5);
         var3.execute();
         createOrDropTrigger(var0, var1, var2, false);
         var3 = var0.prepareStatement("DELETE FROM FT.ROWS WHERE INDEXID=? AND ROWNUM<10000");

         int var6;
         do {
            var3.setInt(1, var5);
            var6 = var3.executeUpdate();
         } while(var6 != 0);

         var3 = var0.prepareStatement("DELETE FROM FT.MAP WHERE NOT EXISTS (SELECT * FROM FT.ROWS R WHERE R.ID=ROWID) AND ROWID<10000");

         do {
            var6 = var3.executeUpdate();
         } while(var6 != 0);

      }
   }

   public static void dropAll(Connection var0) throws SQLException {
      init(var0);
      Statement var1 = var0.createStatement();
      var1.execute("DROP SCHEMA IF EXISTS FT CASCADE");
      removeAllTriggers(var0, "FT_");
      FullTextSettings var2 = FullTextSettings.getInstance(var0);
      var2.removeAllIndexes();
      var2.clearIgnored();
      var2.clearWordList();
   }

   public static ResultSet search(Connection var0, String var1, int var2, int var3) throws SQLException {
      try {
         return search(var0, var1, var2, var3, false);
      } catch (DbException var5) {
         throw DbException.toSQLException(var5);
      }
   }

   public static ResultSet searchData(Connection var0, String var1, int var2, int var3) throws SQLException {
      try {
         return search(var0, var1, var2, var3, true);
      } catch (DbException var5) {
         throw DbException.toSQLException(var5);
      }
   }

   public static void setIgnoreList(Connection var0, String var1) throws SQLException {
      try {
         init(var0);
         FullTextSettings var2 = FullTextSettings.getInstance(var0);
         setIgnoreList(var2, var1);
         Statement var3 = var0.createStatement();
         var3.execute("TRUNCATE TABLE FT.IGNORELIST");
         PreparedStatement var4 = var0.prepareStatement("INSERT INTO FT.IGNORELIST VALUES(?)");
         var4.setString(1, var1);
         var4.execute();
      } catch (DbException var5) {
         throw DbException.toSQLException(var5);
      }
   }

   public static void setWhitespaceChars(Connection var0, String var1) throws SQLException {
      try {
         init(var0);
         FullTextSettings var2 = FullTextSettings.getInstance(var0);
         var2.setWhitespaceChars(var1);
         PreparedStatement var3 = var0.prepareStatement("MERGE INTO FT.SETTINGS VALUES(?, ?)");
         var3.setString(1, "whitespaceChars");
         var3.setString(2, var1);
         var3.execute();
      } catch (DbException var4) {
         throw DbException.toSQLException(var4);
      }
   }

   protected static String asString(Object var0, int var1) throws SQLException {
      if (var0 == null) {
         return "NULL";
      } else {
         switch (var1) {
            case -7:
            case -6:
            case -5:
            case -1:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 12:
            case 16:
            case 91:
            case 92:
            case 93:
               return var0.toString();
            case -4:
            case -3:
            case -2:
            case 0:
            case 70:
            case 1111:
            case 2000:
            case 2001:
            case 2002:
            case 2003:
            case 2004:
            case 2006:
               throw throwException("Unsupported column data type: " + var1);
            case 2005:
               try {
                  if (var0 instanceof Clob) {
                     var0 = ((Clob)var0).getCharacterStream();
                  }

                  return IOUtils.readStringAndClose((Reader)var0, -1);
               } catch (IOException var3) {
                  throw DbException.toSQLException(var3);
               }
            default:
               return "";
         }
      }
   }

   protected static SimpleResultSet createResultSet(boolean var0) {
      SimpleResultSet var1 = new SimpleResultSet();
      if (var0) {
         var1.addColumn("SCHEMA", 12, 0, 0);
         var1.addColumn("TABLE", 12, 0, 0);
         var1.addColumn("COLUMNS", 2003, "VARCHAR ARRAY", 0, 0);
         var1.addColumn("KEYS", 2003, "VARCHAR ARRAY", 0, 0);
      } else {
         var1.addColumn("QUERY", 12, 0, 0);
      }

      var1.addColumn("SCORE", 6, 0, 0);
      return var1;
   }

   protected static String[][] parseKey(Connection var0, String var1) {
      ArrayList var2 = Utils.newSmallArrayList();
      ArrayList var3 = Utils.newSmallArrayList();
      JdbcConnection var4 = (JdbcConnection)var0;
      SessionLocal var5 = (SessionLocal)var4.getSession();
      Parser var6 = new Parser(var5);
      Expression var7 = var6.parseExpression(var1);
      addColumnData(var5, var2, var3, var7);
      String[] var8 = (String[])var2.toArray(new String[0]);
      String[] var9 = (String[])var3.toArray(new String[0]);
      String[][] var10 = new String[][]{var8, var9};
      return var10;
   }

   protected static String quoteSQL(Object var0, int var1) throws SQLException {
      if (var0 == null) {
         return "NULL";
      } else {
         switch (var1) {
            case -7:
            case -6:
            case -5:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 16:
               return var0.toString();
            case -4:
            case -3:
            case -2:
               if (var0 instanceof UUID) {
                  return "'" + var0 + "'";
               }

               byte[] var2 = (byte[])((byte[])var0);
               StringBuilder var3 = (new StringBuilder(var2.length * 2 + 2)).append('\'');
               StringUtils.convertBytesToHex(var3, var2).append('\'');
               return var3.toString();
            case -1:
            case 1:
            case 12:
            case 91:
            case 92:
            case 93:
               return quoteString(var0.toString());
            case 0:
            case 70:
            case 1111:
            case 2000:
            case 2001:
            case 2002:
            case 2003:
            case 2004:
            case 2005:
            case 2006:
               throw throwException("Unsupported key data type: " + var1);
            default:
               return "";
         }
      }
   }

   protected static void removeAllTriggers(Connection var0, String var1) throws SQLException {
      Statement var2 = var0.createStatement();
      ResultSet var3 = var2.executeQuery("SELECT DISTINCT TRIGGER_SCHEMA, TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS");
      Statement var4 = var0.createStatement();

      while(var3.next()) {
         String var5 = var3.getString("TRIGGER_SCHEMA");
         String var6 = var3.getString("TRIGGER_NAME");
         if (var6.startsWith(var1)) {
            var6 = StringUtils.quoteIdentifier(var5) + "." + StringUtils.quoteIdentifier(var6);
            var4.execute("DROP TRIGGER " + var6);
         }
      }

   }

   protected static void setColumns(int[] var0, ArrayList<String> var1, ArrayList<String> var2) throws SQLException {
      int var3 = 0;

      for(int var4 = var1.size(); var3 < var4; ++var3) {
         String var5 = (String)var1.get(var3);
         int var6 = -1;
         int var7 = var2.size();

         for(int var8 = 0; var6 == -1 && var8 < var7; ++var8) {
            String var9 = (String)var2.get(var8);
            if (var9.equals(var5)) {
               var6 = var8;
            }
         }

         if (var6 < 0) {
            throw throwException("Column not found: " + var5);
         }

         var0[var3] = var6;
      }

   }

   protected static ResultSet search(Connection var0, String var1, int var2, int var3, boolean var4) throws SQLException {
      SimpleResultSet var5 = createResultSet(var4);
      if (var0.getMetaData().getURL().startsWith("jdbc:columnlist:")) {
         return var5;
      } else if (var1 != null && !StringUtils.isWhitespaceOrEmpty(var1)) {
         FullTextSettings var6 = FullTextSettings.getInstance(var0);
         if (!var6.isInitialized()) {
            init(var0);
         }

         HashSet var7 = new HashSet();
         addWords(var6, var7, (String)var1);
         HashSet var8 = null;
         PreparedStatement var10 = var6.prepare(var0, "SELECT ROWID FROM FT.MAP WHERE WORDID=?");
         Iterator var11 = var7.iterator();

         label77:
         while(true) {
            HashSet var9;
            Integer var13;
            do {
               if (!var11.hasNext()) {
                  if (var8 != null && !var8.isEmpty()) {
                     PreparedStatement var20 = var6.prepare(var0, "SELECT `KEY`, INDEXID FROM FT.ROWS WHERE ID=?");
                     int var21 = 0;
                     Iterator var22 = var8.iterator();

                     while(var22.hasNext()) {
                        int var23 = (Integer)var22.next();
                        var20.setInt(1, var23);
                        ResultSet var24 = var20.executeQuery();
                        if (var24.next()) {
                           if (var3 > 0) {
                              --var3;
                           } else {
                              String var16 = var24.getString(1);
                              int var17 = var24.getInt(2);
                              IndexInfo var18 = var6.getIndexInfo(var17);
                              if (var4) {
                                 String[][] var19 = parseKey(var0, var16);
                                 var5.addRow(var18.schema, var18.table, var19[0], var19[1], 1.0);
                              } else {
                                 String var25 = StringUtils.quoteIdentifier(var18.schema) + "." + StringUtils.quoteIdentifier(var18.table) + " WHERE " + var16;
                                 var5.addRow(var25, 1.0);
                              }

                              ++var21;
                              if (var2 > 0 && var21 >= var2) {
                                 break;
                              }
                           }
                        }
                     }

                     return var5;
                  }

                  return var5;
               }

               String var12 = (String)var11.next();
               var9 = var8;
               var8 = new HashSet();
               var13 = var6.getWordId(var12);
            } while(var13 == null);

            var10.setInt(1, var13);
            ResultSet var14 = var10.executeQuery();

            while(true) {
               Integer var15;
               do {
                  if (!var14.next()) {
                     continue label77;
                  }

                  var15 = var14.getInt(1);
               } while(var9 != null && !var9.contains(var15));

               var8.add(var15);
            }
         }
      } else {
         return var5;
      }
   }

   private static void addColumnData(SessionLocal var0, ArrayList<String> var1, ArrayList<String> var2, Expression var3) {
      if (var3 instanceof ConditionAndOr) {
         ConditionAndOr var4 = (ConditionAndOr)var3;
         addColumnData(var0, var1, var2, var4.getSubexpression(0));
         addColumnData(var0, var1, var2, var4.getSubexpression(1));
      } else {
         Comparison var8 = (Comparison)var3;
         ExpressionColumn var5 = (ExpressionColumn)var8.getSubexpression(0);
         String var6 = var5.getColumnName(var0, -1);
         var1.add(var6);
         if (var3.getSubexpressionCount() == 1) {
            var2.add((Object)null);
         } else {
            ValueExpression var7 = (ValueExpression)var8.getSubexpression(1);
            var2.add(var7.getValue((SessionLocal)null).getString());
         }
      }

   }

   protected static void addWords(FullTextSettings var0, Set<String> var1, Reader var2) {
      StreamTokenizer var3 = new StreamTokenizer(var2);
      var3.resetSyntax();
      var3.wordChars(33, 255);
      char[] var4 = var0.getWhitespaceChars().toCharArray();
      char[] var5 = var4;
      int var6 = var4.length;

      for(int var7 = 0; var7 < var6; ++var7) {
         char var8 = var5[var7];
         var3.whitespaceChars(var8, var8);
      }

      try {
         while(true) {
            int var10 = var3.nextToken();
            if (var10 == -1) {
               return;
            }

            if (var10 == -3) {
               String var11 = var3.sval;
               var11 = var0.convertWord(var11);
               if (var11 != null) {
                  var1.add(var11);
               }
            }
         }
      } catch (IOException var9) {
         throw DbException.convertIOException(var9, "Tokenizer error");
      }
   }

   protected static void addWords(FullTextSettings var0, Set<String> var1, String var2) {
      String var3 = var0.getWhitespaceChars();
      StringTokenizer var4 = new StringTokenizer(var2, var3);

      while(var4.hasMoreTokens()) {
         String var5 = var4.nextToken();
         var5 = var0.convertWord(var5);
         if (var5 != null) {
            var1.add(var5);
         }
      }

   }

   private static void createTrigger(Connection var0, String var1, String var2) throws SQLException {
      createOrDropTrigger(var0, var1, var2, true);
   }

   private static void createOrDropTrigger(Connection var0, String var1, String var2, boolean var3) throws SQLException {
      Statement var4 = var0.createStatement();
      Throwable var5 = null;

      try {
         String var6 = StringUtils.quoteIdentifier(var1) + "." + StringUtils.quoteIdentifier("FT_" + var2);
         var4.execute("DROP TRIGGER IF EXISTS " + var6);
         if (var3) {
            StringBuilder var7 = new StringBuilder("CREATE TRIGGER IF NOT EXISTS ");
            var7.append(var6).append(" AFTER INSERT, UPDATE, DELETE");
            var7.append(" ON ");
            StringUtils.quoteIdentifier(var7, var1).append('.');
            StringUtils.quoteIdentifier(var7, var2).append(" FOR EACH ROW CALL \"").append(FullTextTrigger.class.getName()).append('"');
            var4.execute(var7.toString());
         }
      } catch (Throwable var15) {
         var5 = var15;
         throw var15;
      } finally {
         if (var4 != null) {
            if (var5 != null) {
               try {
                  var4.close();
               } catch (Throwable var14) {
                  var5.addSuppressed(var14);
               }
            } else {
               var4.close();
            }
         }

      }

   }

   private static void indexExistingRows(Connection var0, String var1, String var2) throws SQLException {
      FullTextTrigger var3 = new FullTextTrigger();
      var3.init(var0, var1, (String)null, var2, false, 1);
      String var4 = "SELECT * FROM " + StringUtils.quoteIdentifier(var1) + "." + StringUtils.quoteIdentifier(var2);
      ResultSet var5 = var0.createStatement().executeQuery(var4);
      int var6 = var5.getMetaData().getColumnCount();

      while(var5.next()) {
         Object[] var7 = new Object[var6];

         for(int var8 = 0; var8 < var6; ++var8) {
            var7[var8] = var5.getObject(var8 + 1);
         }

         var3.fire(var0, (Object[])null, var7);
      }

   }

   private static String quoteString(String var0) {
      if (var0.indexOf(39) < 0) {
         return "'" + var0 + "'";
      } else {
         int var1 = var0.length();
         StringBuilder var2 = new StringBuilder(var1 + 2);
         var2.append('\'');

         for(int var3 = 0; var3 < var1; ++var3) {
            char var4 = var0.charAt(var3);
            if (var4 == '\'') {
               var2.append(var4);
            }

            var2.append(var4);
         }

         var2.append('\'');
         return var2.toString();
      }
   }

   private static void setIgnoreList(FullTextSettings var0, String var1) {
      String[] var2 = StringUtils.arraySplit(var1, ',', true);
      var0.addIgnored(Arrays.asList(var2));
   }

   protected static boolean hasChanged(Object[] var0, Object[] var1, int[] var2) {
      int[] var3 = var2;
      int var4 = var2.length;

      for(int var5 = 0; var5 < var4; ++var5) {
         int var6 = var3[var5];
         Object var7 = var0[var6];
         Object var8 = var1[var6];
         if (var7 == null) {
            if (var8 != null) {
               return true;
            }
         } else if (!var7.equals(var8)) {
            return true;
         }
      }

      return false;
   }

   public static void closeAll() {
      FullTextSettings.closeAll();
   }

   protected static SQLException throwException(String var0) throws SQLException {
      throw new SQLException(var0, "FULLTEXT");
   }

   public static final class FullTextTrigger implements Trigger {
      private FullTextSettings setting;
      private IndexInfo index;
      private int[] columnTypes;
      private static final int INSERT_WORD = 0;
      private static final int INSERT_ROW = 1;
      private static final int INSERT_MAP = 2;
      private static final int DELETE_ROW = 3;
      private static final int DELETE_MAP = 4;
      private static final int SELECT_ROW = 5;
      private static final String[] SQL = new String[]{"MERGE INTO FT.WORDS(NAME) KEY(NAME) VALUES(?)", "INSERT INTO FT.ROWS(HASH, INDEXID, `KEY`) VALUES(?, ?, ?)", "INSERT INTO FT.MAP(ROWID, WORDID) VALUES(?, ?)", "DELETE FROM FT.ROWS WHERE HASH=? AND INDEXID=? AND `KEY`=?", "DELETE FROM FT.MAP WHERE ROWID=? AND WORDID=?", "SELECT ID FROM FT.ROWS WHERE HASH=? AND INDEXID=? AND `KEY`=?"};

      public void init(Connection var1, String var2, String var3, String var4, boolean var5, int var6) throws SQLException {
         this.setting = FullTextSettings.getInstance(var1);
         if (!this.setting.isInitialized()) {
            FullText.init(var1);
         }

         ArrayList var7 = Utils.newSmallArrayList();
         DatabaseMetaData var8 = var1.getMetaData();
         ResultSet var9 = var8.getColumns((String)null, StringUtils.escapeMetaDataPattern(var2), StringUtils.escapeMetaDataPattern(var4), (String)null);
         ArrayList var10 = Utils.newSmallArrayList();

         while(var9.next()) {
            var10.add(var9.getString("COLUMN_NAME"));
         }

         this.columnTypes = new int[var10.size()];
         this.index = new IndexInfo();
         this.index.schema = var2;
         this.index.table = var4;
         this.index.columns = (String[])var10.toArray(new String[0]);
         var9 = var8.getColumns((String)null, StringUtils.escapeMetaDataPattern(var2), StringUtils.escapeMetaDataPattern(var4), (String)null);

         for(int var11 = 0; var9.next(); ++var11) {
            this.columnTypes[var11] = var9.getInt("DATA_TYPE");
         }

         if (var7.isEmpty()) {
            var9 = var8.getPrimaryKeys((String)null, StringUtils.escapeMetaDataPattern(var2), var4);

            while(var9.next()) {
               var7.add(var9.getString("COLUMN_NAME"));
            }
         }

         if (var7.isEmpty()) {
            throw FullText.throwException("No primary key for table " + var4);
         } else {
            ArrayList var14 = Utils.newSmallArrayList();
            PreparedStatement var12 = var1.prepareStatement("SELECT ID, COLUMNS FROM FT.INDEXES WHERE SCHEMA=? AND `TABLE`=?");
            var12.setString(1, var2);
            var12.setString(2, var4);
            var9 = var12.executeQuery();
            if (var9.next()) {
               this.index.id = var9.getInt(1);
               String var13 = var9.getString(2);
               if (var13 != null) {
                  Collections.addAll(var14, StringUtils.arraySplit(var13, ',', true));
               }
            }

            if (var14.isEmpty()) {
               var14.addAll(var10);
            }

            this.index.keys = new int[var7.size()];
            FullText.setColumns(this.index.keys, var7, var10);
            this.index.indexColumns = new int[var14.size()];
            FullText.setColumns(this.index.indexColumns, var14, var10);
            this.setting.addIndexInfo(this.index);
         }
      }

      public void fire(Connection var1, Object[] var2, Object[] var3) throws SQLException {
         if (var2 != null) {
            if (var3 != null) {
               if (FullText.hasChanged(var2, var3, this.index.indexColumns)) {
                  this.delete(var1, var2);
                  this.insert(var1, var3);
               }
            } else {
               this.delete(var1, var2);
            }
         } else if (var3 != null) {
            this.insert(var1, var3);
         }

      }

      public void close() {
         this.setting.removeIndexInfo(this.index);
      }

      public void remove() {
         this.setting.removeIndexInfo(this.index);
      }

      private void insert(Connection var1, Object[] var2) throws SQLException {
         PreparedStatement var3 = null;
         PreparedStatement var4 = null;

         try {
            String var5 = this.getKey(var2);
            int var6 = var5.hashCode();
            var3 = getStatement(var1, 1);
            var3.setInt(1, var6);
            var3.setInt(2, this.index.id);
            var3.setString(3, var5);
            var3.execute();
            ResultSet var7 = var3.getGeneratedKeys();
            var7.next();
            int var8 = var7.getInt(1);
            var4 = getStatement(var1, 2);
            var4.setInt(1, var8);
            int[] var9 = this.getWordIds(var1, var2);
            int[] var10 = var9;
            int var11 = var9.length;

            for(int var12 = 0; var12 < var11; ++var12) {
               int var13 = var10[var12];
               var4.setInt(2, var13);
               var4.execute();
            }
         } finally {
            IOUtils.closeSilently(var3);
            IOUtils.closeSilently(var4);
         }

      }

      private void delete(Connection var1, Object[] var2) throws SQLException {
         PreparedStatement var3 = null;
         PreparedStatement var4 = null;
         PreparedStatement var5 = null;

         try {
            String var6 = this.getKey(var2);
            int var7 = var6.hashCode();
            var3 = getStatement(var1, 5);
            var3.setInt(1, var7);
            var3.setInt(2, this.index.id);
            var3.setString(3, var6);
            ResultSet var8 = var3.executeQuery();
            var4 = getStatement(var1, 4);
            var5 = getStatement(var1, 3);
            if (var8.next()) {
               int var9 = var8.getInt(1);
               var4.setInt(1, var9);
               int[] var10 = this.getWordIds(var1, var2);
               int[] var11 = var10;
               int var12 = var10.length;

               for(int var13 = 0; var13 < var12; ++var13) {
                  int var14 = var11[var13];
                  var4.setInt(2, var14);
                  var4.executeUpdate();
               }

               var5.setInt(1, var7);
               var5.setInt(2, this.index.id);
               var5.setString(3, var6);
               var5.executeUpdate();
            }
         } finally {
            IOUtils.closeSilently(var3);
            IOUtils.closeSilently(var4);
            IOUtils.closeSilently(var5);
         }

      }

      private int[] getWordIds(Connection var1, Object[] var2) throws SQLException {
         HashSet var3 = new HashSet();
         int[] var4 = this.index.indexColumns;
         int var5 = var4.length;

         int var6;
         for(var6 = 0; var6 < var5; ++var6) {
            int var7 = var4[var6];
            int var8 = this.columnTypes[var7];
            Object var9 = var2[var7];
            if (var8 == 2005 && var9 != null) {
               Reader var21;
               if (var9 instanceof Reader) {
                  var21 = (Reader)var9;
               } else {
                  var21 = ((Clob)var9).getCharacterStream();
               }

               FullText.addWords(this.setting, var3, (Reader)var21);
            } else {
               String var10 = FullText.asString(var9, var8);
               FullText.addWords(this.setting, var3, (String)var10);
            }
         }

         PreparedStatement var15 = null;

         int[] var18;
         try {
            var15 = getStatement(var1, 0);
            int[] var16 = new int[var3.size()];
            var6 = 0;

            Integer var22;
            for(Iterator var17 = var3.iterator(); var17.hasNext(); var16[var6++] = var22) {
               String var19 = (String)var17.next();

               while((var22 = this.setting.getWordId(var19)) == null) {
                  var15.setString(1, var19);
                  var15.execute();
                  ResultSet var11 = var15.getGeneratedKeys();
                  if (var11.next()) {
                     int var20 = var11.getInt(1);
                     if (var20 != 0) {
                        this.setting.addWord(var19, var20);
                        var22 = var20;
                        break;
                     }
                  }
               }
            }

            Arrays.sort(var16);
            var18 = var16;
         } finally {
            IOUtils.closeSilently(var15);
         }

         return var18;
      }

      private String getKey(Object[] var1) throws SQLException {
         StringBuilder var2 = new StringBuilder();
         int[] var3 = this.index.keys;
         int var4 = 0;

         for(int var5 = var3.length; var4 < var5; ++var4) {
            if (var4 > 0) {
               var2.append(" AND ");
            }

            int var6 = var3[var4];
            StringUtils.quoteIdentifier(var2, this.index.columns[var6]);
            Object var7 = var1[var6];
            if (var7 == null) {
               var2.append(" IS NULL");
            } else {
               var2.append('=').append(FullText.quoteSQL(var7, this.columnTypes[var6]));
            }
         }

         return var2.toString();
      }

      private static PreparedStatement getStatement(Connection var0, int var1) throws SQLException {
         return var0.prepareStatement(SQL[var1], 1);
      }
   }
}
