/*      */ package org.h2.fulltext;
/*      */ 
/*      */ import java.io.IOException;
/*      */ import java.io.Reader;
/*      */ import java.io.StreamTokenizer;
/*      */ import java.sql.Clob;
/*      */ import java.sql.Connection;
/*      */ import java.sql.DatabaseMetaData;
/*      */ import java.sql.PreparedStatement;
/*      */ import java.sql.ResultSet;
/*      */ import java.sql.SQLException;
/*      */ import java.sql.Statement;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.Collections;
/*      */ import java.util.HashSet;
/*      */ import java.util.Iterator;
/*      */ import java.util.Set;
/*      */ import java.util.StringTokenizer;
/*      */ import org.h2.api.Trigger;
/*      */ import org.h2.command.Parser;
/*      */ import org.h2.engine.SessionLocal;
/*      */ import org.h2.expression.Expression;
/*      */ import org.h2.expression.ExpressionColumn;
/*      */ import org.h2.expression.ValueExpression;
/*      */ import org.h2.expression.condition.Comparison;
/*      */ import org.h2.expression.condition.ConditionAndOr;
/*      */ import org.h2.jdbc.JdbcConnection;
/*      */ import org.h2.message.DbException;
/*      */ import org.h2.tools.SimpleResultSet;
/*      */ import org.h2.util.IOUtils;
/*      */ import org.h2.util.StringUtils;
/*      */ import org.h2.util.Utils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class FullText
/*      */ {
/*      */   private static final String FIELD_SCHEMA = "SCHEMA";
/*      */   private static final String FIELD_TABLE = "TABLE";
/*      */   private static final String FIELD_COLUMNS = "COLUMNS";
/*      */   private static final String FIELD_KEYS = "KEYS";
/*      */   private static final String FIELD_SCORE = "SCORE";
/*      */   private static final String TRIGGER_PREFIX = "FT_";
/*      */   private static final String SCHEMA = "FT";
/*      */   private static final String SELECT_MAP_BY_WORD_ID = "SELECT ROWID FROM FT.MAP WHERE WORDID=?";
/*      */   private static final String SELECT_ROW_BY_ID = "SELECT `KEY`, INDEXID FROM FT.ROWS WHERE ID=?";
/*      */   private static final String FIELD_QUERY = "QUERY";
/*      */   
/*      */   public static void init(Connection paramConnection) throws SQLException {
/*  109 */     Statement statement = paramConnection.createStatement();
/*  110 */     statement.execute("CREATE SCHEMA IF NOT EXISTS FT");
/*  111 */     statement.execute("CREATE TABLE IF NOT EXISTS FT.INDEXES(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SCHEMA VARCHAR, `TABLE` VARCHAR, COLUMNS VARCHAR, UNIQUE(SCHEMA, `TABLE`))");
/*      */ 
/*      */ 
/*      */     
/*  115 */     statement.execute("CREATE TABLE IF NOT EXISTS FT.WORDS(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NAME VARCHAR, UNIQUE(NAME))");
/*      */ 
/*      */     
/*  118 */     statement.execute("CREATE TABLE IF NOT EXISTS FT.ROWS(ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, HASH INT, INDEXID INT, `KEY` VARCHAR, UNIQUE(HASH, INDEXID, `KEY`))");
/*      */ 
/*      */     
/*  121 */     statement.execute("CREATE TABLE IF NOT EXISTS FT.MAP(ROWID INT, WORDID INT, PRIMARY KEY(WORDID, ROWID))");
/*      */     
/*  123 */     statement.execute("CREATE TABLE IF NOT EXISTS FT.IGNORELIST(LIST VARCHAR)");
/*      */     
/*  125 */     statement.execute("CREATE TABLE IF NOT EXISTS FT.SETTINGS(`KEY` VARCHAR PRIMARY KEY, `VALUE` VARCHAR)");
/*      */     
/*  127 */     String str = FullText.class.getName();
/*  128 */     statement.execute("CREATE ALIAS IF NOT EXISTS FT_CREATE_INDEX FOR '" + str + ".createIndex'");
/*  129 */     statement.execute("CREATE ALIAS IF NOT EXISTS FT_DROP_INDEX FOR '" + str + ".dropIndex'");
/*  130 */     statement.execute("CREATE ALIAS IF NOT EXISTS FT_SEARCH FOR '" + str + ".search'");
/*  131 */     statement.execute("CREATE ALIAS IF NOT EXISTS FT_SEARCH_DATA FOR '" + str + ".searchData'");
/*  132 */     statement.execute("CREATE ALIAS IF NOT EXISTS FT_REINDEX FOR '" + str + ".reindex'");
/*  133 */     statement.execute("CREATE ALIAS IF NOT EXISTS FT_DROP_ALL FOR '" + str + ".dropAll'");
/*  134 */     FullTextSettings fullTextSettings = FullTextSettings.getInstance(paramConnection);
/*  135 */     ResultSet resultSet = statement.executeQuery("SELECT * FROM FT.IGNORELIST");
/*      */     
/*  137 */     while (resultSet.next()) {
/*  138 */       String str1 = resultSet.getString(1);
/*  139 */       setIgnoreList(fullTextSettings, str1);
/*      */     } 
/*  141 */     resultSet = statement.executeQuery("SELECT * FROM FT.SETTINGS");
/*  142 */     while (resultSet.next()) {
/*  143 */       String str1 = resultSet.getString(1);
/*  144 */       if ("whitespaceChars".equals(str1)) {
/*  145 */         String str2 = resultSet.getString(2);
/*  146 */         fullTextSettings.setWhitespaceChars(str2);
/*      */       } 
/*      */     } 
/*  149 */     resultSet = statement.executeQuery("SELECT * FROM FT.WORDS");
/*  150 */     while (resultSet.next()) {
/*  151 */       String str1 = resultSet.getString("NAME");
/*  152 */       int i = resultSet.getInt("ID");
/*  153 */       str1 = fullTextSettings.convertWord(str1);
/*  154 */       if (str1 != null) {
/*  155 */         fullTextSettings.addWord(str1, Integer.valueOf(i));
/*      */       }
/*      */     } 
/*  158 */     fullTextSettings.setInitialized(true);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void createIndex(Connection paramConnection, String paramString1, String paramString2, String paramString3) throws SQLException {
/*  173 */     init(paramConnection);
/*  174 */     PreparedStatement preparedStatement = paramConnection.prepareStatement("INSERT INTO FT.INDEXES(SCHEMA, `TABLE`, COLUMNS) VALUES(?, ?, ?)");
/*      */     
/*  176 */     preparedStatement.setString(1, paramString1);
/*  177 */     preparedStatement.setString(2, paramString2);
/*  178 */     preparedStatement.setString(3, paramString3);
/*  179 */     preparedStatement.execute();
/*  180 */     createTrigger(paramConnection, paramString1, paramString2);
/*  181 */     indexExistingRows(paramConnection, paramString1, paramString2);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void reindex(Connection paramConnection) throws SQLException {
/*  192 */     init(paramConnection);
/*  193 */     removeAllTriggers(paramConnection, "FT_");
/*  194 */     FullTextSettings fullTextSettings = FullTextSettings.getInstance(paramConnection);
/*  195 */     fullTextSettings.clearWordList();
/*  196 */     Statement statement = paramConnection.createStatement();
/*  197 */     statement.execute("TRUNCATE TABLE FT.WORDS");
/*  198 */     statement.execute("TRUNCATE TABLE FT.ROWS");
/*  199 */     statement.execute("TRUNCATE TABLE FT.MAP");
/*  200 */     ResultSet resultSet = statement.executeQuery("SELECT * FROM FT.INDEXES");
/*  201 */     while (resultSet.next()) {
/*  202 */       String str1 = resultSet.getString("SCHEMA");
/*  203 */       String str2 = resultSet.getString("TABLE");
/*  204 */       createTrigger(paramConnection, str1, str2);
/*  205 */       indexExistingRows(paramConnection, str1, str2);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void dropIndex(Connection paramConnection, String paramString1, String paramString2) throws SQLException {
/*      */     int j;
/*  220 */     init(paramConnection);
/*  221 */     PreparedStatement preparedStatement = paramConnection.prepareStatement("SELECT ID FROM FT.INDEXES WHERE SCHEMA=? AND `TABLE`=?");
/*      */     
/*  223 */     preparedStatement.setString(1, paramString1);
/*  224 */     preparedStatement.setString(2, paramString2);
/*  225 */     ResultSet resultSet = preparedStatement.executeQuery();
/*  226 */     if (!resultSet.next()) {
/*      */       return;
/*      */     }
/*  229 */     int i = resultSet.getInt(1);
/*  230 */     preparedStatement = paramConnection.prepareStatement("DELETE FROM FT.INDEXES WHERE ID=?");
/*      */     
/*  232 */     preparedStatement.setInt(1, i);
/*  233 */     preparedStatement.execute();
/*  234 */     createOrDropTrigger(paramConnection, paramString1, paramString2, false);
/*  235 */     preparedStatement = paramConnection.prepareStatement("DELETE FROM FT.ROWS WHERE INDEXID=? AND ROWNUM<10000");
/*      */     
/*      */     do {
/*  238 */       preparedStatement.setInt(1, i);
/*  239 */       j = preparedStatement.executeUpdate();
/*  240 */     } while (j != 0);
/*      */ 
/*      */ 
/*      */     
/*  244 */     preparedStatement = paramConnection.prepareStatement("DELETE FROM FT.MAP WHERE NOT EXISTS (SELECT * FROM FT.ROWS R WHERE R.ID=ROWID) AND ROWID<10000");
/*      */ 
/*      */     
/*      */     do {
/*  248 */       j = preparedStatement.executeUpdate();
/*  249 */     } while (j != 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void dropAll(Connection paramConnection) throws SQLException {
/*  262 */     init(paramConnection);
/*  263 */     Statement statement = paramConnection.createStatement();
/*  264 */     statement.execute("DROP SCHEMA IF EXISTS FT CASCADE");
/*  265 */     removeAllTriggers(paramConnection, "FT_");
/*  266 */     FullTextSettings fullTextSettings = FullTextSettings.getInstance(paramConnection);
/*  267 */     fullTextSettings.removeAllIndexes();
/*  268 */     fullTextSettings.clearIgnored();
/*  269 */     fullTextSettings.clearWordList();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static ResultSet search(Connection paramConnection, String paramString, int paramInt1, int paramInt2) throws SQLException {
/*      */     try {
/*  292 */       return search(paramConnection, paramString, paramInt1, paramInt2, false);
/*  293 */     } catch (DbException dbException) {
/*  294 */       throw DbException.toSQLException(dbException);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static ResultSet searchData(Connection paramConnection, String paramString, int paramInt1, int paramInt2) throws SQLException {
/*      */     try {
/*  324 */       return search(paramConnection, paramString, paramInt1, paramInt2, true);
/*  325 */     } catch (DbException dbException) {
/*  326 */       throw DbException.toSQLException(dbException);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void setIgnoreList(Connection paramConnection, String paramString) throws SQLException {
/*      */     try {
/*  343 */       init(paramConnection);
/*  344 */       FullTextSettings fullTextSettings = FullTextSettings.getInstance(paramConnection);
/*  345 */       setIgnoreList(fullTextSettings, paramString);
/*  346 */       Statement statement = paramConnection.createStatement();
/*  347 */       statement.execute("TRUNCATE TABLE FT.IGNORELIST");
/*  348 */       PreparedStatement preparedStatement = paramConnection.prepareStatement("INSERT INTO FT.IGNORELIST VALUES(?)");
/*      */       
/*  350 */       preparedStatement.setString(1, paramString);
/*  351 */       preparedStatement.execute();
/*  352 */     } catch (DbException dbException) {
/*  353 */       throw DbException.toSQLException(dbException);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void setWhitespaceChars(Connection paramConnection, String paramString) throws SQLException {
/*      */     try {
/*  369 */       init(paramConnection);
/*  370 */       FullTextSettings fullTextSettings = FullTextSettings.getInstance(paramConnection);
/*  371 */       fullTextSettings.setWhitespaceChars(paramString);
/*  372 */       PreparedStatement preparedStatement = paramConnection.prepareStatement("MERGE INTO FT.SETTINGS VALUES(?, ?)");
/*      */       
/*  374 */       preparedStatement.setString(1, "whitespaceChars");
/*  375 */       preparedStatement.setString(2, paramString);
/*  376 */       preparedStatement.execute();
/*  377 */     } catch (DbException dbException) {
/*  378 */       throw DbException.toSQLException(dbException);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static String asString(Object paramObject, int paramInt) throws SQLException {
/*  392 */     if (paramObject == null) {
/*  393 */       return "NULL";
/*      */     }
/*  395 */     switch (paramInt) {
/*      */       case -7:
/*      */       case -6:
/*      */       case -5:
/*      */       case -1:
/*      */       case 1:
/*      */       case 2:
/*      */       case 3:
/*      */       case 4:
/*      */       case 5:
/*      */       case 6:
/*      */       case 7:
/*      */       case 8:
/*      */       case 12:
/*      */       case 16:
/*      */       case 91:
/*      */       case 92:
/*      */       case 93:
/*  413 */         return paramObject.toString();
/*      */       case 2005:
/*      */         try {
/*  416 */           if (paramObject instanceof Clob) {
/*  417 */             paramObject = ((Clob)paramObject).getCharacterStream();
/*      */           }
/*  419 */           return IOUtils.readStringAndClose((Reader)paramObject, -1);
/*  420 */         } catch (IOException iOException) {
/*  421 */           throw DbException.toSQLException(iOException);
/*      */         } 
/*      */       case -4:
/*      */       case -3:
/*      */       case -2:
/*      */       case 0:
/*      */       case 70:
/*      */       case 1111:
/*      */       case 2000:
/*      */       case 2001:
/*      */       case 2002:
/*      */       case 2003:
/*      */       case 2004:
/*      */       case 2006:
/*  435 */         throw throwException("Unsupported column data type: " + paramInt);
/*      */     } 
/*  437 */     return "";
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static SimpleResultSet createResultSet(boolean paramBoolean) {
/*  449 */     SimpleResultSet simpleResultSet = new SimpleResultSet();
/*  450 */     if (paramBoolean) {
/*  451 */       simpleResultSet.addColumn("SCHEMA", 12, 0, 0);
/*  452 */       simpleResultSet.addColumn("TABLE", 12, 0, 0);
/*  453 */       simpleResultSet.addColumn("COLUMNS", 2003, "VARCHAR ARRAY", 0, 0);
/*  454 */       simpleResultSet.addColumn("KEYS", 2003, "VARCHAR ARRAY", 0, 0);
/*      */     } else {
/*  456 */       simpleResultSet.addColumn("QUERY", 12, 0, 0);
/*      */     } 
/*  458 */     simpleResultSet.addColumn("SCORE", 6, 0, 0);
/*  459 */     return simpleResultSet;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static String[][] parseKey(Connection paramConnection, String paramString) {
/*  470 */     ArrayList<String> arrayList1 = Utils.newSmallArrayList();
/*  471 */     ArrayList<String> arrayList2 = Utils.newSmallArrayList();
/*  472 */     JdbcConnection jdbcConnection = (JdbcConnection)paramConnection;
/*  473 */     SessionLocal sessionLocal = (SessionLocal)jdbcConnection.getSession();
/*  474 */     Parser parser = new Parser(sessionLocal);
/*  475 */     Expression expression = parser.parseExpression(paramString);
/*  476 */     addColumnData(sessionLocal, arrayList1, arrayList2, expression);
/*  477 */     String[] arrayOfString1 = arrayList1.<String>toArray(new String[0]);
/*  478 */     String[] arrayOfString2 = arrayList2.<String>toArray(new String[0]);
/*  479 */     return new String[][] { arrayOfString1, arrayOfString2 };
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static String quoteSQL(Object paramObject, int paramInt) throws SQLException {
/*      */     byte[] arrayOfByte;
/*      */     StringBuilder stringBuilder;
/*  493 */     if (paramObject == null) {
/*  494 */       return "NULL";
/*      */     }
/*  496 */     switch (paramInt) {
/*      */       case -7:
/*      */       case -6:
/*      */       case -5:
/*      */       case 2:
/*      */       case 3:
/*      */       case 4:
/*      */       case 5:
/*      */       case 6:
/*      */       case 7:
/*      */       case 8:
/*      */       case 16:
/*  508 */         return paramObject.toString();
/*      */       case -1:
/*      */       case 1:
/*      */       case 12:
/*      */       case 91:
/*      */       case 92:
/*      */       case 93:
/*  515 */         return quoteString(paramObject.toString());
/*      */       case -4:
/*      */       case -3:
/*      */       case -2:
/*  519 */         if (paramObject instanceof java.util.UUID) {
/*  520 */           return "'" + paramObject + "'";
/*      */         }
/*  522 */         arrayOfByte = (byte[])paramObject;
/*  523 */         stringBuilder = (new StringBuilder(arrayOfByte.length * 2 + 2)).append('\'');
/*  524 */         StringUtils.convertBytesToHex(stringBuilder, arrayOfByte).append('\'');
/*  525 */         return stringBuilder.toString();
/*      */       case 0:
/*      */       case 70:
/*      */       case 1111:
/*      */       case 2000:
/*      */       case 2001:
/*      */       case 2002:
/*      */       case 2003:
/*      */       case 2004:
/*      */       case 2005:
/*      */       case 2006:
/*  536 */         throw throwException("Unsupported key data type: " + paramInt);
/*      */     } 
/*  538 */     return "";
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void removeAllTriggers(Connection paramConnection, String paramString) throws SQLException {
/*  551 */     Statement statement1 = paramConnection.createStatement();
/*  552 */     ResultSet resultSet = statement1.executeQuery("SELECT DISTINCT TRIGGER_SCHEMA, TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS");
/*      */     
/*  554 */     Statement statement2 = paramConnection.createStatement();
/*  555 */     while (resultSet.next()) {
/*  556 */       String str1 = resultSet.getString("TRIGGER_SCHEMA");
/*  557 */       String str2 = resultSet.getString("TRIGGER_NAME");
/*  558 */       if (str2.startsWith(paramString)) {
/*      */         
/*  560 */         str2 = StringUtils.quoteIdentifier(str1) + "." + StringUtils.quoteIdentifier(str2);
/*  561 */         statement2.execute("DROP TRIGGER " + str2);
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void setColumns(int[] paramArrayOfint, ArrayList<String> paramArrayList1, ArrayList<String> paramArrayList2) throws SQLException {
/*      */     byte b;
/*      */     int i;
/*  576 */     for (b = 0, i = paramArrayList1.size(); b < i; b++) {
/*  577 */       String str = paramArrayList1.get(b);
/*  578 */       byte b1 = -1;
/*  579 */       int j = paramArrayList2.size();
/*  580 */       for (byte b2 = 0; b1 == -1 && b2 < j; b2++) {
/*  581 */         String str1 = paramArrayList2.get(b2);
/*  582 */         if (str1.equals(str)) {
/*  583 */           b1 = b2;
/*      */         }
/*      */       } 
/*  586 */       if (b1 < 0) {
/*  587 */         throw throwException("Column not found: " + str);
/*      */       }
/*  589 */       paramArrayOfint[b] = b1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static ResultSet search(Connection paramConnection, String paramString, int paramInt1, int paramInt2, boolean paramBoolean) throws SQLException {
/*  606 */     SimpleResultSet simpleResultSet = createResultSet(paramBoolean);
/*  607 */     if (paramConnection.getMetaData().getURL().startsWith("jdbc:columnlist:"))
/*      */     {
/*  609 */       return (ResultSet)simpleResultSet;
/*      */     }
/*  611 */     if (paramString == null || StringUtils.isWhitespaceOrEmpty(paramString)) {
/*  612 */       return (ResultSet)simpleResultSet;
/*      */     }
/*  614 */     FullTextSettings fullTextSettings = FullTextSettings.getInstance(paramConnection);
/*  615 */     if (!fullTextSettings.isInitialized()) {
/*  616 */       init(paramConnection);
/*      */     }
/*  618 */     HashSet<String> hashSet = new HashSet();
/*  619 */     addWords(fullTextSettings, hashSet, paramString);
/*  620 */     HashSet<Integer> hashSet1 = null;
/*      */     
/*  622 */     PreparedStatement preparedStatement1 = fullTextSettings.prepare(paramConnection, "SELECT ROWID FROM FT.MAP WHERE WORDID=?");
/*      */     
/*  624 */     for (String str : hashSet) {
/*  625 */       HashSet<Integer> hashSet2 = hashSet1;
/*  626 */       hashSet1 = new HashSet();
/*  627 */       Integer integer = fullTextSettings.getWordId(str);
/*  628 */       if (integer == null) {
/*      */         continue;
/*      */       }
/*  631 */       preparedStatement1.setInt(1, integer.intValue());
/*  632 */       ResultSet resultSet = preparedStatement1.executeQuery();
/*  633 */       while (resultSet.next()) {
/*  634 */         Integer integer1 = Integer.valueOf(resultSet.getInt(1));
/*  635 */         if (hashSet2 == null || hashSet2.contains(integer1)) {
/*  636 */           hashSet1.add(integer1);
/*      */         }
/*      */       } 
/*      */     } 
/*  640 */     if (hashSet1 == null || hashSet1.isEmpty()) {
/*  641 */       return (ResultSet)simpleResultSet;
/*      */     }
/*  643 */     PreparedStatement preparedStatement2 = fullTextSettings.prepare(paramConnection, "SELECT `KEY`, INDEXID FROM FT.ROWS WHERE ID=?");
/*  644 */     byte b = 0;
/*  645 */     for (Iterator<Integer> iterator = hashSet1.iterator(); iterator.hasNext(); ) { int i = ((Integer)iterator.next()).intValue();
/*  646 */       preparedStatement2.setInt(1, i);
/*  647 */       ResultSet resultSet = preparedStatement2.executeQuery();
/*  648 */       if (!resultSet.next()) {
/*      */         continue;
/*      */       }
/*  651 */       if (paramInt2 > 0) {
/*  652 */         paramInt2--; continue;
/*      */       } 
/*  654 */       String str = resultSet.getString(1);
/*  655 */       int j = resultSet.getInt(2);
/*  656 */       IndexInfo indexInfo = fullTextSettings.getIndexInfo(j);
/*  657 */       if (paramBoolean) {
/*  658 */         String[][] arrayOfString = parseKey(paramConnection, str);
/*  659 */         simpleResultSet.addRow(new Object[] { indexInfo.schema, indexInfo.table, arrayOfString[0], arrayOfString[1], 
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*  664 */               Double.valueOf(1.0D) });
/*      */       } else {
/*      */         
/*  667 */         String str1 = StringUtils.quoteIdentifier(indexInfo.schema) + "." + StringUtils.quoteIdentifier(indexInfo.table) + " WHERE " + str;
/*      */         
/*  669 */         simpleResultSet.addRow(new Object[] { str1, Double.valueOf(1.0D) });
/*      */       } 
/*  671 */       b++;
/*  672 */       if (paramInt1 > 0 && b >= paramInt1) {
/*      */         break;
/*      */       } }
/*      */ 
/*      */     
/*  677 */     return (ResultSet)simpleResultSet;
/*      */   }
/*      */ 
/*      */   
/*      */   private static void addColumnData(SessionLocal paramSessionLocal, ArrayList<String> paramArrayList1, ArrayList<String> paramArrayList2, Expression paramExpression) {
/*  682 */     if (paramExpression instanceof ConditionAndOr) {
/*  683 */       ConditionAndOr conditionAndOr = (ConditionAndOr)paramExpression;
/*  684 */       addColumnData(paramSessionLocal, paramArrayList1, paramArrayList2, conditionAndOr.getSubexpression(0));
/*  685 */       addColumnData(paramSessionLocal, paramArrayList1, paramArrayList2, conditionAndOr.getSubexpression(1));
/*      */     } else {
/*  687 */       Comparison comparison = (Comparison)paramExpression;
/*  688 */       ExpressionColumn expressionColumn = (ExpressionColumn)comparison.getSubexpression(0);
/*  689 */       String str = expressionColumn.getColumnName(paramSessionLocal, -1);
/*  690 */       paramArrayList1.add(str);
/*  691 */       if (paramExpression.getSubexpressionCount() == 1) {
/*  692 */         paramArrayList2.add(null);
/*      */       } else {
/*  694 */         ValueExpression valueExpression = (ValueExpression)comparison.getSubexpression(1);
/*  695 */         paramArrayList2.add(valueExpression.getValue(null).getString());
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void addWords(FullTextSettings paramFullTextSettings, Set<String> paramSet, Reader paramReader) {
/*  709 */     StreamTokenizer streamTokenizer = new StreamTokenizer(paramReader);
/*  710 */     streamTokenizer.resetSyntax();
/*  711 */     streamTokenizer.wordChars(33, 255);
/*  712 */     char[] arrayOfChar = paramFullTextSettings.getWhitespaceChars().toCharArray();
/*  713 */     for (char c : arrayOfChar) {
/*  714 */       streamTokenizer.whitespaceChars(c, c);
/*      */     }
/*      */     try {
/*      */       while (true) {
/*  718 */         int i = streamTokenizer.nextToken();
/*  719 */         if (i == -1)
/*      */           break; 
/*  721 */         if (i == -3) {
/*  722 */           String str = streamTokenizer.sval;
/*  723 */           str = paramFullTextSettings.convertWord(str);
/*  724 */           if (str != null) {
/*  725 */             paramSet.add(str);
/*      */           }
/*      */         } 
/*      */       } 
/*  729 */     } catch (IOException iOException) {
/*  730 */       throw DbException.convertIOException(iOException, "Tokenizer error");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void addWords(FullTextSettings paramFullTextSettings, Set<String> paramSet, String paramString) {
/*  743 */     String str = paramFullTextSettings.getWhitespaceChars();
/*  744 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, str);
/*  745 */     while (stringTokenizer.hasMoreTokens()) {
/*  746 */       String str1 = stringTokenizer.nextToken();
/*  747 */       str1 = paramFullTextSettings.convertWord(str1);
/*  748 */       if (str1 != null) {
/*  749 */         paramSet.add(str1);
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void createTrigger(Connection paramConnection, String paramString1, String paramString2) throws SQLException {
/*  764 */     createOrDropTrigger(paramConnection, paramString1, paramString2, true);
/*      */   }
/*      */ 
/*      */   
/*      */   private static void createOrDropTrigger(Connection paramConnection, String paramString1, String paramString2, boolean paramBoolean) throws SQLException {
/*  769 */     try (Statement null = paramConnection.createStatement()) {
/*      */       
/*  771 */       String str = StringUtils.quoteIdentifier(paramString1) + "." + StringUtils.quoteIdentifier("FT_" + paramString2);
/*  772 */       statement.execute("DROP TRIGGER IF EXISTS " + str);
/*  773 */       if (paramBoolean) {
/*  774 */         StringBuilder stringBuilder = new StringBuilder("CREATE TRIGGER IF NOT EXISTS ");
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  779 */         stringBuilder.append(str)
/*  780 */           .append(" AFTER INSERT, UPDATE, DELETE");
/*  781 */         stringBuilder.append(" ON ");
/*  782 */         StringUtils.quoteIdentifier(stringBuilder, paramString1)
/*  783 */           .append('.');
/*  784 */         StringUtils.quoteIdentifier(stringBuilder, paramString2)
/*  785 */           .append(" FOR EACH ROW CALL \"")
/*  786 */           .append(FullTextTrigger.class.getName())
/*  787 */           .append('"');
/*  788 */         statement.execute(stringBuilder.toString());
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void indexExistingRows(Connection paramConnection, String paramString1, String paramString2) throws SQLException {
/*  803 */     FullTextTrigger fullTextTrigger = new FullTextTrigger();
/*  804 */     fullTextTrigger.init(paramConnection, paramString1, null, paramString2, false, 1);
/*      */     
/*  806 */     String str = "SELECT * FROM " + StringUtils.quoteIdentifier(paramString1) + "." + StringUtils.quoteIdentifier(paramString2);
/*  807 */     ResultSet resultSet = paramConnection.createStatement().executeQuery(str);
/*  808 */     int i = resultSet.getMetaData().getColumnCount();
/*  809 */     while (resultSet.next()) {
/*  810 */       Object[] arrayOfObject = new Object[i];
/*  811 */       for (byte b = 0; b < i; b++) {
/*  812 */         arrayOfObject[b] = resultSet.getObject(b + 1);
/*      */       }
/*  814 */       fullTextTrigger.fire(paramConnection, null, arrayOfObject);
/*      */     } 
/*      */   }
/*      */   
/*      */   private static String quoteString(String paramString) {
/*  819 */     if (paramString.indexOf('\'') < 0) {
/*  820 */       return "'" + paramString + "'";
/*      */     }
/*  822 */     int i = paramString.length();
/*  823 */     StringBuilder stringBuilder = new StringBuilder(i + 2);
/*  824 */     stringBuilder.append('\'');
/*  825 */     for (byte b = 0; b < i; b++) {
/*  826 */       char c = paramString.charAt(b);
/*  827 */       if (c == '\'') {
/*  828 */         stringBuilder.append(c);
/*      */       }
/*  830 */       stringBuilder.append(c);
/*      */     } 
/*  832 */     stringBuilder.append('\'');
/*  833 */     return stringBuilder.toString();
/*      */   }
/*      */ 
/*      */   
/*      */   private static void setIgnoreList(FullTextSettings paramFullTextSettings, String paramString) {
/*  838 */     String[] arrayOfString = StringUtils.arraySplit(paramString, ',', true);
/*  839 */     paramFullTextSettings.addIgnored(Arrays.asList(arrayOfString));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static boolean hasChanged(Object[] paramArrayOfObject1, Object[] paramArrayOfObject2, int[] paramArrayOfint) {
/*  854 */     for (int i : paramArrayOfint) {
/*  855 */       Object object1 = paramArrayOfObject1[i], object2 = paramArrayOfObject2[i];
/*  856 */       if (object1 == null) {
/*  857 */         if (object2 != null) {
/*  858 */           return true;
/*      */         }
/*  860 */       } else if (!object1.equals(object2)) {
/*  861 */         return true;
/*      */       } 
/*      */     } 
/*  864 */     return false;
/*      */   }
/*      */ 
/*      */   
/*      */   public static final class FullTextTrigger
/*      */     implements Trigger
/*      */   {
/*      */     private FullTextSettings setting;
/*      */     
/*      */     private IndexInfo index;
/*      */     
/*      */     private int[] columnTypes;
/*      */     private static final int INSERT_WORD = 0;
/*      */     private static final int INSERT_ROW = 1;
/*      */     private static final int INSERT_MAP = 2;
/*      */     private static final int DELETE_ROW = 3;
/*      */     private static final int DELETE_MAP = 4;
/*      */     private static final int SELECT_ROW = 5;
/*  882 */     private static final String[] SQL = new String[] { "MERGE INTO FT.WORDS(NAME) KEY(NAME) VALUES(?)", "INSERT INTO FT.ROWS(HASH, INDEXID, `KEY`) VALUES(?, ?, ?)", "INSERT INTO FT.MAP(ROWID, WORDID) VALUES(?, ?)", "DELETE FROM FT.ROWS WHERE HASH=? AND INDEXID=? AND `KEY`=?", "DELETE FROM FT.MAP WHERE ROWID=? AND WORDID=?", "SELECT ID FROM FT.ROWS WHERE HASH=? AND INDEXID=? AND `KEY`=?" };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(Connection param1Connection, String param1String1, String param1String2, String param1String3, boolean param1Boolean, int param1Int) throws SQLException {
/*  898 */       this.setting = FullTextSettings.getInstance(param1Connection);
/*  899 */       if (!this.setting.isInitialized()) {
/*  900 */         FullText.init(param1Connection);
/*      */       }
/*  902 */       ArrayList<String> arrayList1 = Utils.newSmallArrayList();
/*  903 */       DatabaseMetaData databaseMetaData = param1Connection.getMetaData();
/*  904 */       ResultSet resultSet = databaseMetaData.getColumns(null, 
/*  905 */           StringUtils.escapeMetaDataPattern(param1String1), 
/*  906 */           StringUtils.escapeMetaDataPattern(param1String3), null);
/*      */       
/*  908 */       ArrayList<String> arrayList2 = Utils.newSmallArrayList();
/*  909 */       while (resultSet.next()) {
/*  910 */         arrayList2.add(resultSet.getString("COLUMN_NAME"));
/*      */       }
/*  912 */       this.columnTypes = new int[arrayList2.size()];
/*  913 */       this.index = new IndexInfo();
/*  914 */       this.index.schema = param1String1;
/*  915 */       this.index.table = param1String3;
/*  916 */       this.index.columns = arrayList2.<String>toArray(new String[0]);
/*  917 */       resultSet = databaseMetaData.getColumns(null, 
/*  918 */           StringUtils.escapeMetaDataPattern(param1String1), 
/*  919 */           StringUtils.escapeMetaDataPattern(param1String3), null);
/*      */       
/*  921 */       for (byte b = 0; resultSet.next(); b++) {
/*  922 */         this.columnTypes[b] = resultSet.getInt("DATA_TYPE");
/*      */       }
/*  924 */       if (arrayList1.isEmpty()) {
/*  925 */         resultSet = databaseMetaData.getPrimaryKeys(null, 
/*  926 */             StringUtils.escapeMetaDataPattern(param1String1), param1String3);
/*      */         
/*  928 */         while (resultSet.next()) {
/*  929 */           arrayList1.add(resultSet.getString("COLUMN_NAME"));
/*      */         }
/*      */       } 
/*  932 */       if (arrayList1.isEmpty()) {
/*  933 */         throw FullText.throwException("No primary key for table " + param1String3);
/*      */       }
/*  935 */       ArrayList<? super String> arrayList = Utils.newSmallArrayList();
/*  936 */       PreparedStatement preparedStatement = param1Connection.prepareStatement("SELECT ID, COLUMNS FROM FT.INDEXES WHERE SCHEMA=? AND `TABLE`=?");
/*      */ 
/*      */       
/*  939 */       preparedStatement.setString(1, param1String1);
/*  940 */       preparedStatement.setString(2, param1String3);
/*  941 */       resultSet = preparedStatement.executeQuery();
/*  942 */       if (resultSet.next()) {
/*  943 */         this.index.id = resultSet.getInt(1);
/*  944 */         String str = resultSet.getString(2);
/*  945 */         if (str != null) {
/*  946 */           Collections.addAll(arrayList, StringUtils.arraySplit(str, ',', true));
/*      */         }
/*      */       } 
/*  949 */       if (arrayList.isEmpty()) {
/*  950 */         arrayList.addAll(arrayList2);
/*      */       }
/*  952 */       this.index.keys = new int[arrayList1.size()];
/*  953 */       FullText.setColumns(this.index.keys, arrayList1, arrayList2);
/*  954 */       this.index.indexColumns = new int[arrayList.size()];
/*  955 */       FullText.setColumns(this.index.indexColumns, (ArrayList)arrayList, arrayList2);
/*  956 */       this.setting.addIndexInfo(this.index);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void fire(Connection param1Connection, Object[] param1ArrayOfObject1, Object[] param1ArrayOfObject2) throws SQLException {
/*  966 */       if (param1ArrayOfObject1 != null) {
/*  967 */         if (param1ArrayOfObject2 != null) {
/*      */           
/*  969 */           if (FullText.hasChanged(param1ArrayOfObject1, param1ArrayOfObject2, this.index.indexColumns)) {
/*  970 */             delete(param1Connection, param1ArrayOfObject1);
/*  971 */             insert(param1Connection, param1ArrayOfObject2);
/*      */           } 
/*      */         } else {
/*      */           
/*  975 */           delete(param1Connection, param1ArrayOfObject1);
/*      */         } 
/*  977 */       } else if (param1ArrayOfObject2 != null) {
/*      */         
/*  979 */         insert(param1Connection, param1ArrayOfObject2);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void close() {
/*  988 */       this.setting.removeIndexInfo(this.index);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void remove() {
/*  996 */       this.setting.removeIndexInfo(this.index);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void insert(Connection param1Connection, Object[] param1ArrayOfObject) throws SQLException {
/* 1007 */       PreparedStatement preparedStatement1 = null;
/* 1008 */       PreparedStatement preparedStatement2 = null;
/*      */       try {
/* 1010 */         String str = getKey(param1ArrayOfObject);
/* 1011 */         int i = str.hashCode();
/* 1012 */         preparedStatement1 = getStatement(param1Connection, 1);
/* 1013 */         preparedStatement1.setInt(1, i);
/* 1014 */         preparedStatement1.setInt(2, this.index.id);
/* 1015 */         preparedStatement1.setString(3, str);
/* 1016 */         preparedStatement1.execute();
/* 1017 */         ResultSet resultSet = preparedStatement1.getGeneratedKeys();
/* 1018 */         resultSet.next();
/* 1019 */         int j = resultSet.getInt(1);
/*      */         
/* 1021 */         preparedStatement2 = getStatement(param1Connection, 2);
/* 1022 */         preparedStatement2.setInt(1, j);
/* 1023 */         int[] arrayOfInt = getWordIds(param1Connection, param1ArrayOfObject);
/* 1024 */         for (int k : arrayOfInt) {
/* 1025 */           preparedStatement2.setInt(2, k);
/* 1026 */           preparedStatement2.execute();
/*      */         } 
/*      */       } finally {
/* 1029 */         IOUtils.closeSilently(preparedStatement1);
/* 1030 */         IOUtils.closeSilently(preparedStatement2);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void delete(Connection param1Connection, Object[] param1ArrayOfObject) throws SQLException {
/* 1042 */       PreparedStatement preparedStatement1 = null;
/* 1043 */       PreparedStatement preparedStatement2 = null;
/* 1044 */       PreparedStatement preparedStatement3 = null;
/*      */       try {
/* 1046 */         String str = getKey(param1ArrayOfObject);
/* 1047 */         int i = str.hashCode();
/* 1048 */         preparedStatement1 = getStatement(param1Connection, 5);
/* 1049 */         preparedStatement1.setInt(1, i);
/* 1050 */         preparedStatement1.setInt(2, this.index.id);
/* 1051 */         preparedStatement1.setString(3, str);
/* 1052 */         ResultSet resultSet = preparedStatement1.executeQuery();
/* 1053 */         preparedStatement2 = getStatement(param1Connection, 4);
/* 1054 */         preparedStatement3 = getStatement(param1Connection, 3);
/* 1055 */         if (resultSet.next()) {
/* 1056 */           int j = resultSet.getInt(1);
/* 1057 */           preparedStatement2.setInt(1, j);
/* 1058 */           int[] arrayOfInt = getWordIds(param1Connection, param1ArrayOfObject);
/* 1059 */           for (int k : arrayOfInt) {
/* 1060 */             preparedStatement2.setInt(2, k);
/* 1061 */             preparedStatement2.executeUpdate();
/*      */           } 
/* 1063 */           preparedStatement3.setInt(1, i);
/* 1064 */           preparedStatement3.setInt(2, this.index.id);
/* 1065 */           preparedStatement3.setString(3, str);
/* 1066 */           preparedStatement3.executeUpdate();
/*      */         } 
/*      */       } finally {
/* 1069 */         IOUtils.closeSilently(preparedStatement1);
/* 1070 */         IOUtils.closeSilently(preparedStatement2);
/* 1071 */         IOUtils.closeSilently(preparedStatement3);
/*      */       } 
/*      */     }
/*      */     
/*      */     private int[] getWordIds(Connection param1Connection, Object[] param1ArrayOfObject) throws SQLException {
/* 1076 */       HashSet<String> hashSet = new HashSet();
/* 1077 */       for (int i : this.index.indexColumns) {
/* 1078 */         int j = this.columnTypes[i];
/* 1079 */         Object object = param1ArrayOfObject[i];
/* 1080 */         if (j == 2005 && object != null) {
/*      */           Reader reader;
/* 1082 */           if (object instanceof Reader) {
/* 1083 */             reader = (Reader)object;
/*      */           } else {
/* 1085 */             reader = ((Clob)object).getCharacterStream();
/*      */           } 
/* 1087 */           FullText.addWords(this.setting, hashSet, reader);
/*      */         } else {
/* 1089 */           String str = FullText.asString(object, j);
/* 1090 */           FullText.addWords(this.setting, hashSet, str);
/*      */         } 
/*      */       } 
/* 1093 */       PreparedStatement preparedStatement = null;
/*      */       try {
/* 1095 */         preparedStatement = getStatement(param1Connection, 0);
/* 1096 */         int[] arrayOfInt = new int[hashSet.size()];
/* 1097 */         byte b = 0;
/* 1098 */         for (String str : hashSet) {
/*      */           Integer integer;
/*      */           
/* 1101 */           while ((integer = this.setting.getWordId(str)) == null) {
/* 1102 */             preparedStatement.setString(1, str);
/* 1103 */             preparedStatement.execute();
/* 1104 */             ResultSet resultSet = preparedStatement.getGeneratedKeys();
/* 1105 */             if (resultSet.next()) {
/* 1106 */               int i = resultSet.getInt(1);
/* 1107 */               if (i != 0) {
/* 1108 */                 this.setting.addWord(str, Integer.valueOf(i));
/* 1109 */                 integer = Integer.valueOf(i);
/*      */                 break;
/*      */               } 
/*      */             } 
/*      */           } 
/* 1114 */           arrayOfInt[b++] = integer.intValue();
/*      */         } 
/* 1116 */         Arrays.sort(arrayOfInt);
/* 1117 */         return arrayOfInt;
/*      */       } finally {
/* 1119 */         IOUtils.closeSilently(preparedStatement);
/*      */       } 
/*      */     }
/*      */     
/*      */     private String getKey(Object[] param1ArrayOfObject) throws SQLException {
/* 1124 */       StringBuilder stringBuilder = new StringBuilder();
/* 1125 */       int[] arrayOfInt = this.index.keys; byte b; int i;
/* 1126 */       for (b = 0, i = arrayOfInt.length; b < i; b++) {
/* 1127 */         if (b > 0) {
/* 1128 */           stringBuilder.append(" AND ");
/*      */         }
/* 1130 */         int j = arrayOfInt[b];
/* 1131 */         StringUtils.quoteIdentifier(stringBuilder, this.index.columns[j]);
/* 1132 */         Object object = param1ArrayOfObject[j];
/* 1133 */         if (object == null) {
/* 1134 */           stringBuilder.append(" IS NULL");
/*      */         } else {
/* 1136 */           stringBuilder.append('=').append(FullText.quoteSQL(object, this.columnTypes[j]));
/*      */         } 
/*      */       } 
/* 1139 */       return stringBuilder.toString();
/*      */     }
/*      */     
/*      */     private static PreparedStatement getStatement(Connection param1Connection, int param1Int) throws SQLException {
/* 1143 */       return param1Connection.prepareStatement(SQL[param1Int], 1);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void closeAll() {
/* 1153 */     FullTextSettings.closeAll();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static SQLException throwException(String paramString) throws SQLException {
/* 1165 */     throw new SQLException(paramString, "FULLTEXT");
/*      */   }
/*      */ }


/* Location:              G:\git\codeReviewLog\nginxWebUi\nginxWebUI-3.4.6.jar!\org\h2\fulltext\FullText.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */